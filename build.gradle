buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
//apply plugin: 'war'




jar {
    baseName = 'wxappletpay'
    version = '0.0.1-SNAPSHOT'
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
}

configurations {
    providedRuntime
    mybatisGenerator
}

ext {
    springCloudVersion = 'Dalston.SR4'
}

dependencies {
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
    mybatisGenerator 'tk.mybatis:mapper:3.3.9'
    compile "org.springframework.boot:spring-boot-configuration-processor"

    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'
    compile('com.github.pagehelper:pagehelper-spring-boot-starter:1.1.1')
    compile('com.alibaba:fastjson:1.2.38')
    compile('org.springframework.boot:spring-boot-starter-data-redis')
    compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-logging')
    compile("org.springframework.boot:spring-boot-devtools")
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '1.5.7.RELEASE'   //应用健康状态实时监控
    compile group: 'org.json', name: 'json', version: '20171018'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.1.1'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
//    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '1.5.8.RELEASE'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15', version: '1.45'
    runtime('mysql:mysql-connector-java')
    providedRuntime('org.springframework.boot:spring-boot-starter-jetty')   //删除默认的tomcat，添加jetty才能在idea下使用main函数启动
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.2.1'

    //springcloud
    compile('org.springframework.cloud:spring-cloud-starter')
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-eureka', version: '1.3.5.RELEASE'
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}
